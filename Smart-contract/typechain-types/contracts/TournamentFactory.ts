/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TournamentFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER_ROLE"
      | "PLAYER_ROLE"
      | "REFEREE_ROLE"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "matchCount"
      | "matches"
      | "position"
      | "renounceRole"
      | "revokeRole"
      | "setGame"
      | "setManager"
      | "setMatch"
      | "setPlayer"
      | "setReferee"
      | "setTournament"
      | "setWinner"
      | "supportsInterface"
      | "tournament"
      | "winner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "_winner"
      | "updateTournament"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFEREE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "matchCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "position",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGame",
    values: [BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlayer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTournament",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWinner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tournament",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFEREE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matchCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "position", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReferee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tournament", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace _winnerEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace updateTournamentEvent {
  export type InputTuple = [
    name: string,
    timeStart: BigNumberish,
    timeEnd: BigNumberish,
    fee: BigNumberish,
    award: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    timeStart: bigint,
    timeEnd: bigint,
    fee: bigint,
    award: bigint
  ];
  export interface OutputObject {
    name: string;
    timeStart: bigint;
    timeEnd: bigint;
    fee: bigint;
    award: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TournamentFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TournamentFactory;
  waitForDeployment(): Promise<this>;

  interface: TournamentFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  PLAYER_ROLE: TypedContractMethod<[], [string], "view">;

  REFEREE_ROLE: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  matchCount: TypedContractMethod<[], [bigint], "view">;

  matches: TypedContractMethod<
    [matchId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        player1: bigint;
        player2: bigint;
        winner: bigint;
      }
    ],
    "view"
  >;

  position: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setGame: TypedContractMethod<
    [matchId: BigNumberish, moves: BigNumberish[], result: BigNumberish],
    [void],
    "nonpayable"
  >;

  setManager: TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;

  setMatch: TypedContractMethod<
    [player1: BigNumberish, player2: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlayer: TypedContractMethod<
    [player: AddressLike, randomNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReferee: TypedContractMethod<[referee: AddressLike], [void], "nonpayable">;

  setTournament: TypedContractMethod<
    [
      _name: string,
      _timeStart: BigNumberish,
      _timeEnd: BigNumberish,
      _fee: BigNumberish,
      _award: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setWinner: TypedContractMethod<[player: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tournament: TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        timeStart: bigint;
        timeEnd: bigint;
        fee: bigint;
        award: bigint;
      }
    ],
    "view"
  >;

  winner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PLAYER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REFEREE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "matchCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "matches"
  ): TypedContractMethod<
    [matchId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        player1: bigint;
        player2: bigint;
        winner: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "position"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGame"
  ): TypedContractMethod<
    [matchId: BigNumberish, moves: BigNumberish[], result: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMatch"
  ): TypedContractMethod<
    [player1: BigNumberish, player2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlayer"
  ): TypedContractMethod<
    [player: AddressLike, randomNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferee"
  ): TypedContractMethod<[referee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTournament"
  ): TypedContractMethod<
    [
      _name: string,
      _timeStart: BigNumberish,
      _timeEnd: BigNumberish,
      _fee: BigNumberish,
      _award: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWinner"
  ): TypedContractMethod<[player: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tournament"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        timeStart: bigint;
        timeEnd: bigint;
        fee: bigint;
        award: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "_winner"
  ): TypedContractEvent<
    _winnerEvent.InputTuple,
    _winnerEvent.OutputTuple,
    _winnerEvent.OutputObject
  >;
  getEvent(
    key: "updateTournament"
  ): TypedContractEvent<
    updateTournamentEvent.InputTuple,
    updateTournamentEvent.OutputTuple,
    updateTournamentEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "_winner(address)": TypedContractEvent<
      _winnerEvent.InputTuple,
      _winnerEvent.OutputTuple,
      _winnerEvent.OutputObject
    >;
    _winner: TypedContractEvent<
      _winnerEvent.InputTuple,
      _winnerEvent.OutputTuple,
      _winnerEvent.OutputObject
    >;

    "updateTournament(string,uint256,uint256,uint256,uint256)": TypedContractEvent<
      updateTournamentEvent.InputTuple,
      updateTournamentEvent.OutputTuple,
      updateTournamentEvent.OutputObject
    >;
    updateTournament: TypedContractEvent<
      updateTournamentEvent.InputTuple,
      updateTournamentEvent.OutputTuple,
      updateTournamentEvent.OutputObject
    >;
  };
}
