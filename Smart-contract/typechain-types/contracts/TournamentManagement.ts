/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TournamentManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createNewTournament"
      | "editTournament"
      | "joinTournament"
      | "owner"
      | "renounceOwnership"
      | "setGame"
      | "setManagerTournament"
      | "setMatch"
      | "setRefereeTournament"
      | "setWinnerTournament"
      | "setWithdrawWallet"
      | "transferOwnership"
      | "withdrawAward"
      | "withdrawTournamentFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "_withdrawAward"
      | "creatTournament"
      | "join"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createNewTournament",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editTournament",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinTournament",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGame",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagerTournament",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatch",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefereeTournament",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWinnerTournament",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTournamentFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagerTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRefereeTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWinnerTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTournamentFee",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace _withdrawAwardEvent {
  export type InputTuple = [tournament: AddressLike];
  export type OutputTuple = [tournament: string];
  export interface OutputObject {
    tournament: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace creatTournamentEvent {
  export type InputTuple = [tournamentId: BigNumberish];
  export type OutputTuple = [tournamentId: bigint];
  export interface OutputObject {
    tournamentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace joinEvent {
  export type InputTuple = [tournament: AddressLike, player: AddressLike];
  export type OutputTuple = [tournament: string, player: string];
  export interface OutputObject {
    tournament: string;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TournamentManagement extends BaseContract {
  connect(runner?: ContractRunner | null): TournamentManagement;
  waitForDeployment(): Promise<this>;

  interface: TournamentManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createNewTournament: TypedContractMethod<
    [
      name: string,
      timeStart: BigNumberish,
      timeEnd: BigNumberish,
      fee: BigNumberish,
      award: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  editTournament: TypedContractMethod<
    [
      tournamentId: BigNumberish,
      newName: string,
      newTimeStart: BigNumberish,
      newTimeEnd: BigNumberish,
      newFee: BigNumberish,
      newAward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  joinTournament: TypedContractMethod<
    [tournamentId: BigNumberish, randomNumber: BigNumberish],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setGame: TypedContractMethod<
    [
      tournamentId: BigNumberish,
      matchId: BigNumberish,
      moves: BigNumberish[],
      result: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setManagerTournament: TypedContractMethod<
    [tournamentId: BigNumberish, manager: AddressLike],
    [void],
    "nonpayable"
  >;

  setMatch: TypedContractMethod<
    [tournamentId: BigNumberish, player1: BigNumberish, player2: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRefereeTournament: TypedContractMethod<
    [tournamentId: BigNumberish, referee: AddressLike],
    [void],
    "nonpayable"
  >;

  setWinnerTournament: TypedContractMethod<
    [tournamentId: BigNumberish, referee: AddressLike],
    [void],
    "nonpayable"
  >;

  setWithdrawWallet: TypedContractMethod<
    [_withdrawWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawAward: TypedContractMethod<
    [tournamentId: BigNumberish, winner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawTournamentFee: TypedContractMethod<
    [amout: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createNewTournament"
  ): TypedContractMethod<
    [
      name: string,
      timeStart: BigNumberish,
      timeEnd: BigNumberish,
      fee: BigNumberish,
      award: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "editTournament"
  ): TypedContractMethod<
    [
      tournamentId: BigNumberish,
      newName: string,
      newTimeStart: BigNumberish,
      newTimeEnd: BigNumberish,
      newFee: BigNumberish,
      newAward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinTournament"
  ): TypedContractMethod<
    [tournamentId: BigNumberish, randomNumber: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGame"
  ): TypedContractMethod<
    [
      tournamentId: BigNumberish,
      matchId: BigNumberish,
      moves: BigNumberish[],
      result: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManagerTournament"
  ): TypedContractMethod<
    [tournamentId: BigNumberish, manager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMatch"
  ): TypedContractMethod<
    [tournamentId: BigNumberish, player1: BigNumberish, player2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRefereeTournament"
  ): TypedContractMethod<
    [tournamentId: BigNumberish, referee: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWinnerTournament"
  ): TypedContractMethod<
    [tournamentId: BigNumberish, referee: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWithdrawWallet"
  ): TypedContractMethod<[_withdrawWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAward"
  ): TypedContractMethod<
    [tournamentId: BigNumberish, winner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTournamentFee"
  ): TypedContractMethod<[amout: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "_withdrawAward"
  ): TypedContractEvent<
    _withdrawAwardEvent.InputTuple,
    _withdrawAwardEvent.OutputTuple,
    _withdrawAwardEvent.OutputObject
  >;
  getEvent(
    key: "creatTournament"
  ): TypedContractEvent<
    creatTournamentEvent.InputTuple,
    creatTournamentEvent.OutputTuple,
    creatTournamentEvent.OutputObject
  >;
  getEvent(
    key: "join"
  ): TypedContractEvent<
    joinEvent.InputTuple,
    joinEvent.OutputTuple,
    joinEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "_withdrawAward(address)": TypedContractEvent<
      _withdrawAwardEvent.InputTuple,
      _withdrawAwardEvent.OutputTuple,
      _withdrawAwardEvent.OutputObject
    >;
    _withdrawAward: TypedContractEvent<
      _withdrawAwardEvent.InputTuple,
      _withdrawAwardEvent.OutputTuple,
      _withdrawAwardEvent.OutputObject
    >;

    "creatTournament(uint256)": TypedContractEvent<
      creatTournamentEvent.InputTuple,
      creatTournamentEvent.OutputTuple,
      creatTournamentEvent.OutputObject
    >;
    creatTournament: TypedContractEvent<
      creatTournamentEvent.InputTuple,
      creatTournamentEvent.OutputTuple,
      creatTournamentEvent.OutputObject
    >;

    "join(address,address)": TypedContractEvent<
      joinEvent.InputTuple,
      joinEvent.OutputTuple,
      joinEvent.OutputObject
    >;
    join: TypedContractEvent<
      joinEvent.InputTuple,
      joinEvent.OutputTuple,
      joinEvent.OutputObject
    >;
  };
}
